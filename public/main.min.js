"use strict";const CLASS_NAMES={TASK_FIELD:".task-field",ADD_BUTTON:".add-button",TASKS_WRAP:".tasks-wrap",DELETE_BUTTON_TASKS:".delete-button",ACTIVE_TASKS_WRAP:".active-tasks__wrap",ERROR_MESSAGE:".error-message",CHECK_INPUT:".check__input",EDIT_TEXT:".edit-text",BIN:".bin",TEXT:".text",INPUT_WRAP:".input-wrap",TASK:".task"};let tasks=JSON.parse(localStorage.getItem("to-do-list")||"[]");function init(){const taskField=document.querySelector(CLASS_NAMES.TASK_FIELD);const addTaskButton=document.querySelector(CLASS_NAMES.ADD_BUTTON);const deleteTasksButton=document.querySelector(CLASS_NAMES.DELETE_BUTTON_TASKS);renderTasks();clearTasks();taskField===null||taskField===void 0?void 0:taskField.addEventListener("keyup",(e=>e.code==="Enter"&&createTask()));deleteTasksButton===null||deleteTasksButton===void 0?void 0:deleteTasksButton.addEventListener("click",deleteAllTasks);addTaskButton===null||addTaskButton===void 0?void 0:addTaskButton.addEventListener("click",createTask)}function renderTasks(){const tasksWrap=document.querySelector(CLASS_NAMES.TASKS_WRAP);const activeTasksWrap=document.querySelector(CLASS_NAMES.ACTIVE_TASKS_WRAP);const template=tasks.map((task=>createTemplate(task))).join("");if(activeTasksWrap)activeTasksWrap.innerHTML=template;if(tasksWrap)tasksWrap.hidden=false;addEventListeners()}function createTemplate({id:id,value:value,checked:checked}){const className=checked?"text task_completed":"text";return`\n    <div data-task-id="${id}" class="task task-wrap">\n      <div class="task-field">\n        <label for="${id}" class="check">\n          <input\n            id="${id}"\n            data-checked="${checked}"\n            class="check__input"\n            type="checkbox"\n          />\n          <span id="${id}" class="check__box"></span>\n        </label>\n        <div class="${className}" contenteditable="false">${value}</div>\n      </div>\n      <div class="action-task">\n        <span class="edit-text"></span>\n        <span class="bin"></span>\n      </div>\n    </div>\n  `}function addEventListeners(){document.querySelectorAll(".task").forEach((task=>{const taskField=task.querySelector(CLASS_NAMES.CHECK_INPUT);const pencil=task.querySelector(CLASS_NAMES.EDIT_TEXT);const bin=task.querySelector(CLASS_NAMES.BIN);taskField===null||taskField===void 0?void 0:taskField.addEventListener("change",(e=>changeTaskStatus(e)));pencil===null||pencil===void 0?void 0:pencil.addEventListener("click",(e=>toggleTaskEditing(e)));bin===null||bin===void 0?void 0:bin.addEventListener("click",(e=>deleteTask(e)))}))}function clearTasks(){const activeTasksWrap=document.querySelector(CLASS_NAMES.ACTIVE_TASKS_WRAP);const tasksWrap=document.querySelector(CLASS_NAMES.TASKS_WRAP);if(!(activeTasksWrap===null||activeTasksWrap===void 0?void 0:activeTasksWrap.childElementCount)){if(tasksWrap)tasksWrap.hidden=true;localStorage.clear()}}function createTask(){const taskField=document.querySelector(CLASS_NAMES.TASK_FIELD);const value=taskField===null||taskField===void 0?void 0:taskField.value.trim();removeErrorMessage();if(!value){showErrorMessage()}else{tasks=[...tasks,{id:String(Date.now()),value:value,checked:false}];setTasks();if(taskField)taskField.value="";renderTasks()}}function removeErrorMessage(){const errorMessage=document.querySelector(CLASS_NAMES.ERROR_MESSAGE);errorMessage===null||errorMessage===void 0?void 0:errorMessage.remove()}function showErrorMessage(){const inputWrap=document.querySelector(CLASS_NAMES.INPUT_WRAP);inputWrap===null||inputWrap===void 0?void 0:inputWrap.insertAdjacentHTML("afterend",'<div class="error-message">Please enter the task name</div>');setTimeout(removeErrorMessage,2e3)}function setTasks(){try{localStorage.setItem("to-do-list",JSON.stringify(tasks))}catch(error){console.error("An error occurred while saving tasks:",error)}}function changeTaskStatus(e){var _a;const target=e.target;const task=target.closest(".task");const taskField=(_a=task===null||task===void 0?void 0:task.querySelector(CLASS_NAMES.TEXT))!==null&&_a!==void 0?_a:null;target.dataset.checked=!JSON.parse(target.dataset.checked);if(task&&target.dataset.checked==="true"){tasks[findTaskIndex(task)].checked=true;setTasks();taskField===null||taskField===void 0?void 0:taskField.classList.add("task_completed")}else if(task&&target.dataset.checked==="false"){tasks[findTaskIndex(task)].checked=false;setTasks();taskField===null||taskField===void 0?void 0:taskField.classList.remove("task_completed")}}function findTaskIndex(task){return tasks.findIndex((el=>el.id===task.dataset.taskId))}function toggleTaskEditing(e){var _a;const target=e.target;const task=target.closest(".task");const taskField=(_a=task===null||task===void 0?void 0:task.querySelector(CLASS_NAMES.TEXT))!==null&&_a!==void 0?_a:null;if((taskField===null||taskField===void 0?void 0:taskField.getAttribute("contenteditable"))==="false"){changeFieldAccess(taskField,"true",target,"Save");setCursorPosition(taskField)}else if(task&&(taskField===null||taskField===void 0?void 0:taskField.getAttribute("contenteditable"))==="true"){tasks[findTaskIndex(task)].value=taskField.innerText.trim();setTasks();changeFieldAccess(taskField,"false",target,"")}}function changeFieldAccess(taskField,value,icon,text){taskField.setAttribute("contenteditable",value);icon.innerText=text;icon.classList.toggle("save-text")}function setCursorPosition(taskField){taskField.focus();const selection=window.getSelection();selection===null||selection===void 0?void 0:selection.selectAllChildren(taskField);selection===null||selection===void 0?void 0:selection.collapseToEnd()}function deleteTask(e){const target=e.target;const task=target.closest(CLASS_NAMES.TASK);if(task){tasks.splice(findTaskIndex(task),1);task.remove()}setTasks();clearTasks()}function deleteAllTasks(){const activeTasksWrap=document.querySelector(CLASS_NAMES.ACTIVE_TASKS_WRAP);if(activeTasksWrap){activeTasksWrap.innerHTML=""}tasks=[];clearTasks()}init();